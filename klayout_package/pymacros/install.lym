<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
 
"""
klab - A Python package for KLayout integration with lab instrumentation.

This package provides tools and utilities to enhance and automate instrument control in KLayout,
a popular layout viewer and editor for integrated circuits.

Copyright (c) 2025, Technology Innovation Institute. All rights reserved.

"""

import pya
import sys
import os
import subprocess
import importlib
import shutil
from importlib.metadata import version as get_version
from packaging.version import Version
import traceback
        
        
# This script implements the strategy of calling pip's internal main function
# to install packages into KLayout's user site-packages directory.

# --- VENV AND PACKAGE CONFIGURATION ---
PACKAGE_NAME = "klab"                       # For user-facing messages

# Map package names to the name they are imported by, for special cases.
IMPORT_NAME_MAP = {
    "pyvisa-py": "pyvisa_py",
    "rpds-py": "rpds",
}

def get_pip_main():
    """
    Imports and returns the main function from pip, handling different
    versions of pip where the location of _main might change.
    """
    try:
        from pip import __main__
        if hasattr(__main__, "_main"):
            return __main__._main
        else:
            # Fallback for older pip versions
            from pip._internal.cli.main import main
            return main
    except ImportError as e:
        pya.MessageBox.critical("Fatal Installation Error", f"Could not import pip's main function. Your KLayout Python environment may have a broken pip installation.\n\nError: {e}", pya.MessageBox.Ok)
        return None

def parse_requirements(req_path):
    """
    Parses a requirements.txt file to yield package specifications.
    Requires 'packaging' to be installed.
    """
    from packaging.requirements import Requirement
    with open(req_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                yield Requirement(line)

def check_and_install_dependencies(pip_main, target_dir):
    """
    Checks for required Python packages and their versions, and installs them 
    into the target directory by calling pip's main function directly.
    
    Args:
        pip_main (function): The main function from the pip module.
        target_dir (str): The KLayout user site-packages directory to install into.

    Returns:
        bool: True if all dependencies are met, False otherwise.
    """
    print(f"Checking for required Python packages for {PACKAGE_NAME}...")

    # First, ensure 'packaging' is installed, as it's needed for parsing.
    try:
        importlib.import_module("packaging")
    except ImportError:
        print("- 'packaging' library not found. Installing it first...")
        try:
            # Use a simplified command for this initial install.
            command = ["install", "--upgrade", "--target", target_dir, "--no-build-isolation", "--only-binary=:all:", "packaging"]
            retcode = pip_main(command)
            if retcode != 0:
                raise RuntimeError(f"pip failed with exit code {retcode}")
            importlib.import_module("packaging")
        except Exception as e:
            pya.MessageBox.warning("Installation Error", f"Could not install the 'packaging' library. klab cannot continue.\n\nError: {e}", pya.MessageBox.Ok)
            return False

    package_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    reqs_file = os.path.join(package_root, 'requirements.txt')
    if not os.path.exists(reqs_file):
        pya.MessageBox.warning("Installation Error", "Could not find requirements.txt.", pya.MessageBox.Ok)
        return False

    all_installed = True
    for req in parse_requirements(reqs_file):
        module_name = IMPORT_NAME_MAP.get(req.name, req.name.replace('-', '_'))
        try:
            # Check if module can be imported.
            importlib.import_module(module_name)
            installed_version_str = get_version(module_name)
            
            if req.specifier.contains(installed_version_str):
                print(f"- Dependency '{req.name}' (v{installed_version_str}) is already installed and compatible.")
            else:
                print(f"- Dependency '{req.name}' (v{installed_version_str}) is installed but incompatible with '{req.specifier}'. Will upgrade.")
                raise ImportError("Version mismatch")

        except (ImportError, importlib.metadata.PackageNotFoundError):
            print(f"- Dependency '{req.name}' not found or incompatible. Installing directly via pip API...")
            try:
                command = ["install", "--upgrade", "--target", target_dir, "--no-build-isolation", "--only-binary=:all:", str(req)]

                print(f"  &gt; Calling pip.main({command})")
                retcode = pip_main(command)
                if retcode != 0:
                    raise RuntimeError(f"pip exited with status {retcode} while installing {req.name}")

                print(f"- Successfully installed/upgraded '{req.name}'.")
                
                importlib.invalidate_caches()
                importlib.import_module(module_name)
                
            except (RuntimeError, ImportError) as e:
                error_msg = f"Failed to install '{req.name}'.\n\n{e}"
                print(f"ERROR: {error_msg}")
                #pya.MessageBox.warning("Dependency Installation Failed", error_msg, pya.MessageBox.Ok)
                all_installed = False

    return all_installed
        
def install():
    """
    This function is called by KLayout to install the plugin.
    """
    package_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    
    # Add the main klab python source directory to the path, just in case.
    klab_python_dir = os.path.join(package_root, 'python')
    if klab_python_dir not in sys.path:
        sys.path.insert(0, klab_python_dir)
        print(f"Added main package source directory to Python path: {klab_python_dir}")
    
    # Determine the KLayout user data directory in a platform-specific way.
    if sys.platform == "win32":
        # On Windows, the correct path is in %APPDATA%\KLayout
        app_data_root = os.getenv('APPDATA')
        if not app_data_root:
             pya.MessageBox.critical("Fatal Error", "Could not determine APPDATA folder.", pya.MessageBox.Ok)
             return
        klayout_data_path = os.path.join(app_data_root, "KLayout")
    else:
        # On Linux/macOS, application_data_path() correctly points to ~/.klayout or similar.
        klayout_data_path = pya.Application.instance().application_data_path()

    klayout_py_version = f"{sys.version_info.major}.{sys.version_info.minor}"
    target_dir = os.path.join(klayout_data_path, "lib", f"python{klayout_py_version}", "site-packages")
    os.makedirs(target_dir, exist_ok=True)
    
    # Add this directory to Python's path to ensure it's available.
    if target_dir not in sys.path:
        sys.path.insert(0, target_dir)
        print(f"Added KLayout user site-packages directory to Python path: {target_dir}")

    # Set KLAYOUT_PYTHONHOME if it is not already defined.`
    if 'KLAYOUT_PYTHONHOME' not in os.environ:
        os.environ['KLAYOUT_PYTHONHOME'] = target_dir
        print(f"Set KLAYOUT_PYTHONHOME environment variable to: {target_dir}")

    # Get pip's main function to drive the installation.
    pip_main_func = get_pip_main()
    if not pip_main_func:
        print(f"Halting {PACKAGE_NAME} installation due to missing pip function.")
        return

    # Use the reliable pip function to install dependencies into the KLayout user site-packages.
    if not check_and_install_dependencies(pip_main_func, target_dir):
        print(f"Halting {PACKAGE_NAME} installation due to missing dependencies.")
        return

    # Register the menu.
    try:
        from klab.plugin.menu import refresh_measurement_dock
        main_window = pya.Application.instance().main_window()
        refresh_measurement_dock()
        print(f"{PACKAGE_NAME} package loaded successfully.")
    except Exception as e:
        print(f"An error occurred while loading the {PACKAGE_NAME} package: {e}")
        

# Import the reload function from dev_tools to refresh the package. 
# First add the parent directory to the system path to allow for relative imports.

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)
    print(f"Added parent directory to Python path: {parent_dir}")

    
# Execute the installation when KLayout loads this macro.
if __name__ == "__main__":
    # If this script is run directly, perform the installation.
    print(f"Running {PACKAGE_NAME} installation script...")
    install()
    

    from klab import KLabPCellLibrary
    # Register the PCell library with KLayout
    KLabPCellLibrary()



    </text>
</klayout-macro>
