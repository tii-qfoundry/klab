# ==================================================================
# FILE: klab/python/klab/drivers/keithley_2450.py
# ==================================================================
# This file contains a low wiegth driver for the Keithley 2450 SMU,
# adapted from the qcodes driver to work with our lightweight
# KlabInstrument base class.
# ==================================================================

from klab.instrument import KlabInstrument
from pyvisa.resources import Resource
import time


# ==================================================================
# Concrete driver for the Keithley 2450, now inheriting from the
# abstract SMU base class.
# ==================================================================

from klab.instrument import SMU # Changed from KlabInstrument to SMU
import time

class Keithley2450(SMU):
    """
    Concrete driver for the Keithley 2450, implementing the SMU interface.
    """
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, **kwargs)
        if self._visa_instrument:
            print(f"Keithley 2450 Driver: Performing initial setup for {self.name}.")
            self.reset()
            self.set_sense_mode_4_wire(True)
    
    # --- Implementation of abstract SMU methods ---
    
    def source_voltage(self, voltage: float, current_compliance: float):
        self.write(f":SOURce:FUNCtion VOLT")
        self.write(f":SOURce:VOLTage {voltage}")
        self.write(f":SOURce:VOLTage:ILIMit {current_compliance}")

    def source_current(self, current: float, voltage_compliance: float):
        self.write(f":SOURce:FUNCtion CURR")
        self.write(f":SOURce:CURRent {current}")
        self.write(f":SOURce:CURRent:VLIMit {voltage_compliance}")

    def measure_voltage(self, nplc=1) -> float:
        self.write(":SENSe:FUNCtion 'VOLT'")
        self.write(f":SENSe:VOLTage:NPLCycles {nplc}")
        response = self.ask(":READ?")
        return float(response.split(',')[0])

    def measure_current(self, nplc=1) -> float:
        self.write(":SENSe:FUNCtion 'CURR'")
        self.write(f":SENSe:CURRent:NPLCycles {nplc}")
        response = self.ask(":READ?")
        return float(response.split(',')[0])

    def enable_source(self, enable: bool):
        self.write(f":OUTPut:STATe {'ON' if enable else 'OFF'}")

    # --- Instrument-specific helper methods ---

    def set_sense_mode_4_wire(self, is_4_wire: bool):
        """Sets the measurement sense mode."""
        self.write(f":SENSe:REMote {'ON' if is_4_wire else 'OFF'}")

if  __name__ == "__main__":
    # Example usage
    smu = Keithley2450(name="Keithley 2450", address="TCPIP::SOMEADDRESS::INSTR")

    
    

    smu.close() # Clean up the connection